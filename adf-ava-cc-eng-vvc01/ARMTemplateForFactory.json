{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ava-cc-eng-vvc01"
		},
		"ls_AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=sql-cc-eng-vvc01.database.windows.net;Initial Catalog=AdventureWorksLT;User ID=vvc"
		},
		"ls_DataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_DataLakeStorage'"
		},
		"ls_AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akv-cc-eng-vvc03.vault.azure.net/"
		},
		"ls_DataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsavaccengvvc01.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pip-desafio-adf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Tables_to_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select table_name from INFORMATION_SCHEMA.TABLES where table_schema = '@{pipeline().parameters.schema_par}' and TABLE_TYPE = 'BASE TABLE';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_gen",
								"type": "DatasetReference",
								"parameters": {
									"ds_name_table": "Product",
									"ds_schema_table": "SalesLT"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If Condition",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tables_to_load'), item().table_name)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pip_copy_data_sql_adls",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"schema_par": {
															"value": "@pipeline().parameters.schema_par",
															"type": "Expression"
														},
														"table_name_par": {
															"value": "@item().table_name",
															"type": "Expression"
														},
														"container_par": {
															"value": "@pipeline().parameters.container_par",
															"type": "Expression"
														},
														"directory_par": {
															"value": "@pipeline().parameters.directory_par",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Tables_to_load",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tables_to_load",
							"value": [
								"ProductCategory",
								"ProductModel"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"container_par": {
						"type": "string",
						"defaultValue": "desafio-adf"
					},
					"directory_par": {
						"type": "string",
						"defaultValue": "adventureworks/incremental"
					},
					"schema_par": {
						"type": "string",
						"defaultValue": "SalesLT"
					}
				},
				"variables": {
					"tables_to_load": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-29T15:52:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_gen')]",
				"[concat(variables('factoryId'), '/pipelines/pip_copy_data_sql_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_data_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Item Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ItemType",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Sales Channel",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SalesChannel",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Order Priority",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderPriority",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Order Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderDate",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Order ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "OrderID",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Ship Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ShipDate",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Units Sold",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnitsSold",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Unit Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnitPrice",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Unit Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnitCost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Total Revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalRevenue",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Total Cost",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalCost",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Total Profit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TotalProfit",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"ds_container": {
										"value": "@pipeline().parameters.container_par",
										"type": "Expression"
									},
									"ds_directory": {
										"value": "@pipeline().parameters.directory_par",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"container_par": {
						"type": "string",
						"defaultValue": "landing"
					},
					"directory_par": {
						"type": "string",
						"defaultValue": "sales"
					}
				},
				"variables": {
					"last_modified": {
						"type": "String"
					},
					"max_valor_escrito": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-29T15:52:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_data_sql_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LastModified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.watermark where table_name = '@{pipeline().parameters.table_name_par}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_gen",
								"type": "DatasetReference",
								"parameters": {
									"ds_name_table": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									},
									"ds_schema_table": {
										"value": "@pipeline().parameters.schema_par",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SetLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "last_modified",
							"value": {
								"value": "@activity('LastModified').output.firstRow.LastModified",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Maxlastmodified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT max(ModifiedDate) as ModifiedDate  FROM @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_gen",
								"type": "DatasetReference",
								"parameters": {
									"ds_name_table": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									},
									"ds_schema_table": {
										"value": "@pipeline().parameters.schema_par",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SetLastModified_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Maxlastmodified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_valor_escrito",
							"value": {
								"value": "@activity('Maxlastmodified').output.firstRow.ModifiedDate",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "SetLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetLastModified_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('last_modified'), variables('max_valor_escrito'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par} where ModifiedDate > '@{variables('last_modified')}' and ModifiedDate <= '@{variables('max_valor_escrito')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable_gen",
											"type": "DatasetReference",
											"parameters": {
												"ds_name_table": {
													"value": "@pipeline().parameters.table_name_par",
													"type": "Expression"
												},
												"ds_schema_table": {
													"value": "@pipeline().parameters.schema_par",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet",
											"type": "DatasetReference",
											"parameters": {
												"ds_container": {
													"value": "@pipeline().parameters.container_par",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@pipeline().parameters.directory_par",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Update watermark_copy1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "update dbo.watermark\nset LastModified = '@{variables('max_valor_escrito')}'\nwhere table_name = '@{pipeline().parameters.table_name_par}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Web",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-20.eastus2.logic.azure.com:443/workflows/6bd65841dfc04b659ad949fb8a30eb7c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=h-73peUiFdXW6-KCJTEn3-tdxBRdRejtQhiALkwgvsg",
										"method": "POST",
										"headers": {},
										"body": {
											"RUN_ID": "@{pipeline().RunId}",
											"TABLE_NAME": "@{pipeline().parameters.table_name_par}",
											"TIMESTAMP": "@{utcnow()}",
											"ERRODESCRIPTION": "NAO EXISTE NOVOS REGISTROS PARA ESTA TABELA",
											"TO": "vanessa.vieira.v.v.c@gmail.com",
											"SUBJECT": "INGESTAO DIARIA"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"schema_par": {
						"type": "string",
						"defaultValue": "SalesLT"
					},
					"table_name_par": {
						"type": "string",
						"defaultValue": "Product"
					},
					"container_par": {
						"type": "string",
						"defaultValue": "landing"
					},
					"directory_par": {
						"type": "string",
						"defaultValue": "adventureworks/incremental/product"
					}
				},
				"variables": {
					"last_modified": {
						"type": "String"
					},
					"max_valor_escrito": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-29T15:52:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_gen')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_data_sql_desafio')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LastModified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.watermark where table_name = '@{pipeline().parameters.table_name_par}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_gen",
								"type": "DatasetReference",
								"parameters": {
									"ds_name_table": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									},
									"ds_schema_table": {
										"value": "@pipeline().parameters.schema_par",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SetLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "last_modified",
							"value": {
								"value": "@activity('LastModified').output.firstRow.LastModified",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Maxlastmodified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT max(ModifiedDate) as ModifiedDate  FROM @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_gen",
								"type": "DatasetReference",
								"parameters": {
									"ds_name_table": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									},
									"ds_schema_table": {
										"value": "@pipeline().parameters.schema_par",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SetMaxLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Maxlastmodified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_valor_escrito",
							"value": {
								"value": "@activity('Maxlastmodified').output.firstRow.ModifiedDate",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "SetLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetMaxLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('last_modified'), variables('max_valor_escrito'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par} where ModifiedDate > '@{variables('last_modified')}' and ModifiedDate <= '@{variables('max_valor_escrito')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable_gen",
											"type": "DatasetReference",
											"parameters": {
												"ds_name_table": {
													"value": "@pipeline().parameters.table_name_par",
													"type": "Expression"
												},
												"ds_schema_table": {
													"value": "@pipeline().parameters.schema_par",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet",
											"type": "DatasetReference",
											"parameters": {
												"ds_container": {
													"value": "@pipeline().parameters.container_par",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@pipeline().parameters.directory_par",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Update watermark",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "update dbo.watermark\nset LastModified = '@{variables('max_valor_escrito')}'\nwhere table_name = '@{pipeline().parameters.table_name_par}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Web",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-20.eastus2.logic.azure.com:443/workflows/6bd65841dfc04b659ad949fb8a30eb7c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=h-73peUiFdXW6-KCJTEn3-tdxBRdRejtQhiALkwgvsg",
										"method": "POST",
										"headers": {},
										"body": {
											"RUN_ID": "@{pipeline().RunId}",
											"TABLE_NAME": "@{pipeline().parameters.table_name_par}",
											"TIMESTAMP": "@{utcnow()}",
											"ERRODESCRIPTION": "NAO EXISTE NOVOS REGISTROS PARA ESTA TABELA",
											"TO": "vanessavieiravvc@gmail.com",
											"SUBJECT": "INGESTAO DIARIA"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"schema_par": {
						"type": "string",
						"defaultValue": "SalesLT"
					},
					"table_name_par": {
						"type": "string",
						"defaultValue": "Product"
					},
					"container_par": {
						"type": "string",
						"defaultValue": "landing"
					},
					"directory_par": {
						"type": "string",
						"defaultValue": "adventureworks/incremental/product"
					}
				},
				"variables": {
					"last_modified": {
						"type": "String"
					},
					"max_valor_escrito": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-29T15:52:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_gen')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_data_zip')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary_generic",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-29T15:52:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary')]",
				"[concat(variables('factoryId'), '/datasets/Binary_generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"database_name": {
						"type": "string",
						"defaultValue": "AdventureWorksa"
					},
					"server_name": {
						"type": "string",
						"defaultValue": "sql-cc-eng-vvc01.database.windows.net"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_gen')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_name_table": {
						"type": "string",
						"defaultValue": "Product"
					},
					"ds_schema_table": {
						"type": "string",
						"defaultValue": "SalesLT"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_schema_table",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_name_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_DataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "5m-Sales-Records.zip",
						"folderPath": "sales",
						"fileSystem": "landing"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_DataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_DataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "root/sales/zip",
						"fileSystem": "landing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_DataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_DataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "5m Sales Records.csv",
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_DataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_DataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_container": {
						"type": "string"
					},
					"ds_directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": " ",
						"folderPath": {
							"value": "@dataset().ds_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ds_container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_DataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "sn-azsql-pwd-cc-vvc03"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_DataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_DataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_DataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		}
	]
}